name: "Lean update"
description: "Attempts to update lean and dependencies of a lean project"
author: "Oliver Butterley, Asei Inoue(Seasawher)"
inputs:
  on_update_succeeds:
    description: | # markdown
      What to do when an update is available and the build is successful.
      Allowed values:
        * `silent`: Do nothing
        * `commit`: silently commit the updated files
        * `issue`: notify the user by creating an issue
        * `pr`: notify the user by creating a pull request
      Default: `pr`.
    required: false
    default: "pr"
  on_update_fails:
    description: | # markdown
      What to do when an update is available and the build fails.
      Allowed values:
        * `silent`: Do nothing
        * `issue`: notify the user by creating an issue
        * `pr`: notify the user by creating a pull request
      Default: `issue`.
    required: false
    default: "issue"
  update_if_modified:
    description: | # markdown
      Specifies which files, when updated during `lake update`, will cause the action to update code or notify the user.
      Therefore, this option does not affect the behavior when the build/test/lint fail after `lake update`.
      Allowed values:
        * `lean-toolchain`:
          If `lean-toolchain` is specified, this GitHub Action will skip updates unless the Lean version is updated.
          Here, "skipping updates" means "not attempting to update code or send notifications when the build/test/lint succeed after lake update".
        * `lake-manifest.json`: if `lake-manifest.json` is specified, this GitHub Action will not skip updates as long as any dependent package is updated.
      Default: `lake-manifest.json`
    required: false
    default: "lake-manifest.json"
  build_args:
    description: |
      This GitHub Action uses leanprover/lean-action to build and test the repository.
      This parameter determines what to pass to the build-args argument of leanprover/lean-action.
    required: false
    default: "--log-level=warning"
  lake-package-directory:
    description: |
      The directory containing the Lake package to build.
      This parameter is passed to the lake-package-directory argument of leanprover/lean-action.
    required: false
    default: "."
  token:
    description: |
      A Github token to be used for committing
    required: false
    default: ${{ github.token }}
outputs:
  result:
    description: | # markdown
      The action outputs `no-update`, `update-success` or `update-fail` depending on the three possible scenarios.

      Description of each value:
        * `no-update`: No update was available.
        * `update-success`: An update was available and lean-action step was successful.
        * `update-fail`: An update was available but the lean-action step failed.
    value: ${{ steps.record-outcome.outputs.outcome }}
runs:
  using: "composite"
  steps:
    - name: Install elan
      run: |
        curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y
        echo "$HOME/.elan/bin" >> $GITHUB_PATH
      shell: bash

    - name: Update dependencies of ${{ github.repository }}
      run: |
        cd ${{ inputs.lake-package-directory }}
        lake update
      shell: bash

    - name: Check if lean-toolchain or lake-manifest.json were updated
      id: check-update
      run: node ${{ github.action_path }}/scripts/checkChanges.js
      env:
        UPDATE_IF_MODIFIED: ${{ inputs.update_if_modified }}
        LAKE_PACKAGE_DIRECTORY: ${{ inputs.lake-package-directory }}
      shell: bash

    - name: Try to build lean if something was updated
      if: steps.check-update.outputs.files_changed == 'true'
      id: build-lean
      continue-on-error: true
      uses: leanprover/lean-action@v1
      with:
        build-args: ${{ inputs.build_args }}
        lake-package-directory: ${{ inputs.lake-package-directory }}

    - name: Record outcome
      id: record-outcome
      run: | # bat
        if [ "${{ steps.check-update.outputs.files_changed }}" == "false" ]; then
          echo "No update available"
          echo "outcome=no-update" >> $GITHUB_OUTPUT
        elif [ "${{ steps.build-lean.outcome }}" == "success" ]; then
          echo "Update available and build successful"
          echo "outcome=update-success" >> $GITHUB_OUTPUT
        elif [ "${{ steps.build-lean.outcome }}" == "failure" ]; then
          echo "Update available but build fails"
          echo "outcome=update-fail" >> $GITHUB_OUTPUT
        fi
      shell: bash

    # ------------------------- #
    # when update is successful #
    # ------------------------- #
    - name: Open PR if the updated lean build was successful
      if: steps.build-lean.outcome == 'success' && inputs.on_update_succeeds == 'pr' && steps.check-update.outputs.do_update == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        title: "Updates available and ready to merge"
        body: ""
        delete-branch: true
        branch-suffix: random
        branch: auto-update/patch
        labels: "auto-update-lean"

    - name: Open issue if the updated lean build was successful
      if: steps.build-lean.outcome == 'success' && inputs.on_update_succeeds == 'issue' && steps.check-update.outputs.do_update == 'true'
      run: | # bat
        CHANGED_FILES="${{ steps.check-update.outputs.changed_files }}"
        BULLET_LIST=""
        for file in $CHANGED_FILES; do
          BULLET_LIST="$BULLET_LIST- $file\n"
        done
        BODY="Files changed in update:\n$BULLET_LIST"
        gh issue create --title "$TITLE" --body "$BODY"
      env:
        # Could be best to use the default token here
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}
        TITLE: Updates available and have been tested to build correctly
      shell: bash

    - name: Commit update if the updated lean build was successful
      if: steps.build-lean.outcome == 'success' && inputs.on_update_succeeds == 'commit' && steps.check-update.outputs.do_update == 'true'
      uses: EndBug/add-and-commit@v9.1.4
      with:
        default_author: github_actions
      env:
        ON_UPDATE_SUCCEEDS: ${{ inputs.on_update_succeeds }}
        DO_UPDATE: ${{ steps.check-update.outputs.do_update }}

    # ----------------- #
    # when update fails #
    # ----------------- #
    - name: Open issue if the updated lean build fails
      if: steps.build-lean.outcome == 'failure' && inputs.on_update_fails == 'issue'
      run: | # bat
        CHANGED_FILES="${{ steps.check-update.outputs.changed_files }}"
        BULLET_LIST=""
        for file in $CHANGED_FILES; do
          BULLET_LIST="$BULLET_LIST
        - $file"
        done
        BODY="Try \`lake update\` and then investigate why this update causes the lean build to fail.

        Files changed in update:$BULLET_LIST"
        gh issue create --title "$TITLE" --body "$BODY"
      env:
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}
        TITLE: "Updates available but manual intervention required"
      shell: bash

    - name: Action fails if the updated lean build fails
      if: steps.build-lean.outcome == 'failure' && inputs.on_update_fails == 'fail'
      run: exit 1
      shell: bash

branding:
  icon: "download-cloud"
  color: "blue"
