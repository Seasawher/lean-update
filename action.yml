name: "Lean update"
description: "Attempts to update lean and dependencies of a lean project"
author: "Oliver Butterley, Asei Inoue(Seasawher)"
inputs:
  on_update_succeeds:
    description: |
      What to do when an update is available and the build is successful.
      Allowed values: "silent", "commit", "issue" or "pr".
      Default: "pr".
    required: true
    default: "pr"
  on_update_fails:
    description: |
      What to do when an update is available and the build fails.
      Allowed values: "silent", "issue" or "pr".
      Default: "issue".
    required: true
    default: "issue"
  what_to_update:
    description: |
      Specifies which files, when updated during `lake update`, will cause the action to skip updates.
      For example, if "lean-toolchain" is specified, this GitHub Action will skip updates unless the Lean version is updated.
      Also, for example, if "lake-manifest.json" is specified, this GitHub Action will not skip updates as long as any dependent package is updated.
      Here, "skipping updates" means "not attempting to update code or send notifications when the build/test/lint succeed after lake update".
      Therefore, this option does not affect the behavior when the build/test/lint fail after lake update.
      Allowed values: "lean-toolchain" or "lake-manifest.json".
      Default: "lean-toolchain"
    required: false
    default: "lean-toolchain"
  build_args:
    description: |
      This GitHub Action uses leanprover/lean-action to build and test the repository.
      This parameter determines what to pass to the build-args argument of lean-action.
    required: false
    default: "--log-level=warning"
  token:
    description: |
      A Github token to be used for committing
    required: true
    default: ${{ github.token }}
outputs:
  result:
    description: "The action outputs `up-to-date`, `update-succeeds` or `update-fails` depending on the three possible scenarios."
    value: ${{ steps.record-outcome.outputs.outcome }}
runs:
  using: "composite"
  steps:
    - name: Install elan
      run: |
        curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y
        echo "$HOME/.elan/bin" >> $GITHUB_PATH
      shell: bash

    - name: Update dependencies of ${{ github.repository }}
      run: lake -R -Kenv=dev update
      shell: bash

    - name: Check if lean-toolchain or lake-manifest.json were updated
      id: check-update
      run: |
        $result = & "${{ github.action_path }}/scripts/checkChanges.ps1" | ConvertFrom-Json
        Add-Content -Path "$env:GITHUB_OUTPUT" -Value "files_changed=$($result.files_changed)"
        Add-Content -Path "$env:GITHUB_OUTPUT" -Value "changed_files=$($result.changed_files)"
        Add-Content -Path "$env:GITHUB_OUTPUT" -Value "file_to_update_changed=$($result.file_to_update_changed)"
      env:
        WHAT_TO_UPDATE: ${{ inputs.what_to_update }}
      shell: pwsh

    - name: Try to build lean if something was updated
      if: steps.check-update.outputs.files_changed == 'true'
      id: build-lean
      continue-on-error: true
      uses: leanprover/lean-action@v1
      with:
        build-args: ${{ inputs.build_args }}

    - name: Record outcome
      id: record-outcome
      run: |
        if ("${{steps.check-update.outputs.files_changed}}" -eq "false") {
          Write-Host "No update available"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "outcome=no-update"
        } elseif ("${{steps.build-lean.outcome}}" -eq "success") {
          Write-Host "Update available and build successful"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "outcome=update-success"
        } elseif ("${{steps.build-lean.outcome}}" -eq "failure") {
          Write-Host "Update available but build fails"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "outcome=update-fail"
        }
      shell: pwsh

    # ------------------------- #
    # when update is successful #
    # ------------------------- #
    - name: Open PR if the updated lean build was successful
      if: steps.build-lean.outcome == 'success' && inputs.on_update_succeeds == 'pr' && steps.check-update.outputs.file_to_update_changed == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        title: "Updates available and ready to merge"
        body: ""
        delete-branch: true
        branch-suffix: random
        branch: auto-update/patch
        labels: "auto-update-lean"

    - name: Open issue if the updated lean build was successful
      if: steps.build-lean.outcome == 'success' && inputs.on_update_succeeds == 'issue' && steps.check-update.outputs.file_to_update_changed == 'true'
      run: |
        $files = "${{ steps.check-update.outputs.changed_files }}"
        $bullet_list = ""
        foreach ($file in $files -split ' ') {
          $bullet_list += "- $file`n"
        }
        $body = "Files changed in update:`n$bullet_list"
        gh issue create --title "$env:TITLE" --body $body
      env:
        # Could be best to use the default token here
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}
        TITLE: Updates available and have been tested to build correctly
      shell: pwsh

    - name: Commit update if the updated lean build was successful
      if: steps.build-lean.outcome == 'success' && inputs.on_update_succeeds == 'commit' && steps.check-update.outputs.file_to_update_changed == 'true'
      uses: EndBug/add-and-commit@v9.1.4
      with:
        default_author: github_actions
      env:
        ON_UPDATE_SUCCEEDS: ${{ inputs.on_update_succeeds }}
        FILE_TO_UPDATE_CHANGED: ${{ steps.check-update.outputs.file_to_update_changed }}

    # ----------------- #
    # when update fails #
    # ----------------- #
    - name: Open issue if the updated lean build fails
      if: steps.build-lean.outcome == 'failure' && inputs.on_update_fails == 'issue'
      run: |
        $files = "${{ steps.check-update.outputs.changed_files }}"
        $bullet_list = ""
        foreach ($file in $files -split ' ') {
          $bullet_list += "- $file`n"
        }
        $body = "Try `lake update` and then investigate why this update causes the lean build to fail.`nFiles changed in update:`n$bullet_list"
        gh issue create --title "$env:TITLE" --body $body
      env:
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}
        TITLE: "Updates available but manual intervention required"
      shell: pwsh

    - name: Action fails if the updated lean build fails
      if: steps.build-lean.outcome == 'failure' && inputs.on_update_fails == 'fail'
      run: exit 1
      shell: bash

branding:
  icon: "download-cloud"
  color: "blue"
